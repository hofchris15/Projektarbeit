==Conclusion==
Mit dem Ziel die beste Sprache der Entwicklung zu werden, hat sich Swift ein sehr hohes Ziel gesteckt, dass beinahe nicht zu erreichen sein wird. Bei der Entwicklung des Swift Servers sind einige Probleme aufgetaucht, die wir hier in unserer subjektiven Meinung beschreiben möchten.

===Die Sprache===
Unter anderem ist uns aufgefallen, dass die Syntax anfangs ungewohnt ist und etwas Zeit in Anspruch nimmt, sich mit dieser Vertraut zu machen. Die Dokumentation bzw. die Guides die auf Swift.org oder auch auf anderen Seiten zur Verfügung gestellt werden, sind eine Unterstützung, jedoch kommt man leider nicht darum herum, sehr vieles mit "try and error" auszutesten. Sehr hilfreich war der auf Apples Developer Seite zu findente <span class = "plainlinks">[https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309 Language Guide]</span> welcher die Basics und auch viele fortgeschrittene Themen behandelt. Für Kontrollfluss-Funktionen gibt es die Möglichkeit z.B. Initaliseriung, Condition-Überprüfung und "else"-Block in eine Zeile zu schreiben. Leider wird der Code dadurch schwer lesbar und für Entwickler anderer Sprachen beinahe unmöglich lesbar, sollte keine Zeit zum Investieren vorhanden sein.

===Das Framework===
Zum verwendeten Framwork ist zu sagen, dass es bereits sehr gute Ansetze für die Abhandlung von Request und Response bereithält, jedoch noch einen sehr weiten Weg zum Referenzprodukt Node.js hat. Das Handling im allgemeinen ist sehr unsausgereift und muss mit vielen kleinen Workarounds dazu gebracht werden, das Verhalten von Node.js zu imitieren. Leider verführt das vorgeschlagene Requesthandling dazu, dass viele Methoden angelegt werden die alle das gleiche Verhalten aufweisen, jedoch auch nur schwerliche refactored werden können. 
Leider gab es für Perfect auch keinen Beispiel-Server mit mehrern Seiten und Funktionen, der veranschaulicht wie die Entwickler des Frameworks sich die Umsetzung bzw. die Verwendung des Frameworks gedacht haben. Bei den vorhanden Beispielen war oft die Dokumentation unzureichen, sodass die Anwendung verschiedern Packages in der begrenzten Zeit nicht möglich waren. Als Beispiel lässt sich das Perfect-Crypto Package anführen wo die Beschreibung nicht reichte, um ein Passwort zu verschlüsseln. Dazu wurde von uns das Packet SwiftyBeaver nach längerem studieren der Klassen und Methoden von Perfect-Crypte als Ersatz verwendet. Einigemale mussten die Packages selbst analysiert werden, um zu verstehen, wie die Pakete angewand werden, was natürlich wiederum zu einen besseren Verständnis führte, jedoch eine Menge Zeit verschlang.
Grundsätlich ist das Framework weiter zu empfählen, jedoch muss bis zum Sicheren anwenden des Frameworks sehr viel Zeit und Ärger investiert werden. 

Abschließend bleibt noch zu sagen, dass diese Sprache für sich genommen eine sehr schöne und lesbare Sprache ist, wenn nur wenige Kurzschreibweisen verwendet werden. Der Ansatz der Sicherheit und der daraus schließenden "absoluten Definition" ist nachvollziebar und auch sehr vorteilhaft, da man bei jeder Methode und Funktion das Verhalten genau erkennt. Jedoch ist es bis zum Einholen des Node.js Frameworks noch viel Arbeit, da das Node.js Framework ausgereifter und mehr Funktionen in Form von Modulen bietet. Leider ist Perfect für die Version 3.0 entwickelt worden, der Server bereits auf 3.1 entwickelt, und während der Entwicklung Version 4.0 von Swift veröffentlich worden, wodurch sich Fehler in der Dokumentation eingeschlichen haben.