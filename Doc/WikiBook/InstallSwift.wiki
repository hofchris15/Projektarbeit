==Installation von Swift==
Da Swift eine Sprache die vorrängig für MacOS erstellt wurde, ist es erst mit ein wenig Aufwand auf Linux Distributionen lauffähig. Dazu muss die Toolchain von <span class="plainlinks">[https://swift.org/download/#releases Swift.org ] </span> in ein Verzeichnis geladen werden, und je nach Wunsch in der Systemumgebung definiert werden. Eine genau Installationsanleitung kann ebenfalls unter <span class = "plainlinks">[https://swift.org/getting-started/ Swift.org ]</span>nachgelesen werden. Für die Code Beispiele ist der user gegen den tatsächlichen username auszutauschen. Um dies zu vereinfachen ist der Username unseres Beispielusers "user".
Lade die aktuelle stabile Toolchain auf der Download Seite von <span class="plainlinks">[https://swift.org/download/#releases Swift.org ] </span> herunter und speicher es in einem beliebigen Verzeichnis z.B. im Downloads-Verzeichnis des aktuellen users.  
Danach muss <span class="plainlinks">[http://clang.org/ clang]</span> installiert werden, um das compilieren von Swift Programmen zu ermöglichen. Dies ist mit dem Befehl auf einer Linux Bash möglich:

<code>sudo apt-get install clang</code>

Danach muss die heruntergeladenen Swift Toolchain in ein geeignetes Verzeichnis extrahiert werden und der PATH Variable hinzugefügt werden:
Dazu erstellen wir im ersten Schritt das Verzeichnis "install" im user Home-Verzeichnis

<code>sudo mkdir /home/user/install</code>

Entpacken der toolchain in das zuvor erstelle "intall" Verzeichnis:

<code>sudo tar -xf /home/user/Downloads/swift-3.1.1-RELEASE-ubuntu16.10.tar.gz -C /home/user/install</code>

Um das ausführen von Swift leichter zu gestallten kann Swift der PATH-Variable temporär hinzugefügt werden:

<code>export PATH=${PATH}:/home/user/install/swift-3.1.1-RELEASE-ubuntu16.10/usr/bin</code>

Um dauerhaft, z.B. nach einem Neustart, Swift im Terminal zur Verfügung zu haben, kann der Pfad zur Toolchain in die Datei /etc/environment eingetragen werden.
Dazu wird die Datei environment mit einem Texteditor, in unserem Fall "VIM" geöffnet und erweitert:

<code>sudo vim /etc/environment</code>

und folgenden Text angefügen:

''''':/home/user/install/swift-3.1.1-RELEASE-ubuntu16.10/usr/bin''''' 

Danach sollte die Installation mit der Ausgabe der Version von Swift überprüft werden:

<code>swift --version</code>

welches die Ausgabe:

<code>Swift version 3.1.1 (swift-3.1.1-RELEASE)</code>

zur Folge hat. 
Eventuell muss die Besitzrechte des Swift-Installationsordner geändert werden, da eventuell Zugriffrechte nicht gegeben sind oder der root als Besitzer hinterlegt ist. Dazu wird folgender Befehl auf den Ordner angewand:<br/>
<code>sudo chown -R user:user ~/install/swift-3.1.1-RELEASE-ubuntu16.10/</code>

Damit ist die Installation abgeschlossen.

===Swift REPL===
Swift bietet bei dieser Installation ein Terminal Tool namens Swift-REPL (Swift-Read-eval-print-loop) welches es ermöglicht Swift direkt auf der Konsole zu test und auszuführen
Da dies für das ausführen des Servers nicht notwendig ist, wird hier darauf nicht näher eingegangen, dazu aber jedenfalls mehr auf <span class = "plainlinks">[https://swift.org/getting-started/ Swift.org ]</span>.

===Swift Package Manager===
Der Package Manager ist eine Möglichkeit ein Skelton für ein Projekt zu erstellen. Der Package Manger erstellt einen Verzeichnisbaum der eine gewisse Grundstruktur ermöglicht. Diese Struktur wird auf <span class = "plainlinks">[https://swift.org/getting-started/ Swift.org ]</span> noch in der Version 3.0 beschrieben jedoch änderte sich dies mit dem RELEASE von Version 3.1.
Zuerst wird ein Verzeichnis erstellt, dass das neue Projekt repräsentiert und in weiterer folge als Projektordner bezeichnet wird.
<blockquote>
	<code>mkdir Hello</code><br/>
	<code>cd Hello</code><br/>
	<code>swift package init</code><br/>
</blockquote>
Mit dem Ausführen des Init-Befehls wird unter anderem eine Package.swift Datei erstellt, in dem alle Abhängigkeiten des Projekt gespeichert werden. Weiter wir dein Verzeichnis Sources erstellt, in dem sich nur .swift-Datein befinden dürfen. Im Verzeichnis Tests befinden sich die Testklassen.

<blockquote>
├──Package.swift<br/>
├──Sources<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──Hello.swift<br/>
├──Tests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──HelloTests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──HelloTests.swift<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──LinuxMain.swift<br/>
</blockquote>

Sollte eine Strukturierung z.B. mit Hilfe von Ordner in Sources erfolgen, ist direkt unter dem Sources Verzeichnis ein weiteres Verzeichnis z.b. "exe" anzulegen, in dem die gewünschte Ordnerstruktur z.b. für ein MVC-Pattern erstellt werden kann. Es ist aufgrund des Compilers und der Modularität nicht möglich, mehrere Ordner oder Ordner und .swift-Dateien gemischt im Sources-Verzeichnis zu compilieren. Dies liegt daran, dass der Compiler Verzeichnisse als Module versteht und jeweils nur ein Modul erstellt werden kann. Daher ignoriert er oder compiliert entweder nur die Hello.swift oder den ersten gefunden Ordner.
====falsche Struktur====
<blockquote>
├──Package.swift <br/>
├──Sources<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──model<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──fileHandler.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──view<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──renderView.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──controller<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──router.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──main.swift<br/>
├──Tests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──FileTests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──FileHandlerTests.swift<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──-LinuxMain.swift<br/>
</blockquote>
====richtige Struktur====
<blockquote>
├──Package.swift<br/>
├──Sources<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──exe<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──model<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──fileHandler.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──view<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──renderView.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──controller<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──router.swift<br/>
│&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──main.swift<br/>
├──Tests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;├──FileTests<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;│&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──FileHandlerTests.swift<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;└──LinuxMain.swift<br/>
</blockquote>

===Swift compiling===
Der Swift Compiler kann mit dem Befehl <br/>
<code>swift build</code><br/>
 gestartet werden, dazu muss man sich im Projektordner befinden. Durch das aufrufen des Compilers werden die im Package.swift eingetragenen Abhängigkeiten z.B. von Github heruntergeladen und compiliert. Dabei wird das Verzeichnis ".build" erstellt in dem sich der ausführbare Code befindet. Erst danach wird der eigene produzierte Code compiliert und ebenfalls ins Verzeichnis "/.build/debug" gespeichert. Das compilieren von Abhängigkeiten erfolgt nur einmal nach dem Download oder dem Download von Aktualiesierungen. Die Packages werden im Ordnerbaum abgespeichert damit sie nicht jedesmal compilieren heruntergeladen werden müssen. In der alten Version 3.0 wurde dazu ein eignes Verzeichnis "Packages" angelegt, und die aus Github ausgecheckten Module in Form von Source Code gespeichert. Seit dem Update auf die Version 3.1 wird diese Verzeichnis "Packages" im Überverzeichnis ".build" mit abgespeichert. Auch hier ist der Source Code der Module zu finden. Der Compiler ingnoriert beim compilieren grundsätlich alle Verzeichnisse ab dem Sources-Ordner was zur Folge hat, das Swift-Datein bzw. Klassen nicht wie in bekannt andern Sprachen z.B. mit einem "import"-Befehl zur Verfügung gestellt werden müssen, sondern automatisch als eine große Swift-Datei angesehen werden.

Der Swift Compiler unterstütz die Systemsprachen von C oder Objective-C was durch den Clang Importer erreicht wird. Der Clang-Importer importiert Clang-Module, die die C und Objective-C APIs auf die Swift APIs mappen, wodurch das compilieren auf Linux bewerkstelligt wird.

==Server installieren==

Der Server wird auf Github ausgecheckt und compiliert. Dazu folgenden Link <span class = "plainlinks">[https://github.com/hofchris15/Projektarbeit.git Github/Projekt ]</span> mit Git ausführen oder als zip herunterladen. In diesem Repository befinden sich der Ordner NodeServer in dem der Reverenz-Server in JavaScript mit Node und Express.js geschrieben ist. Im Ordner SwiftServer befindet sich der in Swifft geschriebene Server, der für diese Installation relevant ist. Damit der Server läuft ist der Node-Server irrelevant, sodass dieser gelöscht werden kann oder ausgeführt werden kann wie im Kapitel "Installation Node Server" beschrieben ist.

===Installation mit Git===
Folgende Befehle sind auszuführen:

<blockquote>
<code>mkdir SwiftServer</code><br/>
<code>cd SwiftServer</code><br/>
<code>git clone https://github.com/hofchris15/Projektarbeit.git</code><br/>
<code>swift build</code> oder <code>swift build --configuration release</code><br/>
</blockquote>

Mit dem ersten Befehl wird in einem beliebigen Verzeichnis der Ordner SwiftServer erstellt, der als Projektordner dient. Danach wechselt man in das Verzeichnis und checkt den Server von Github aus. Danach liegt der Server in Form von Source Code im Verzeichnis "SwiftServer" auf und kann mit dem letzten Befehl compiliert werden. Mit diesem Kommando wird ein debug compilierung durchgeführt, das für die Entwicklung benötigt wird, da mehr Informationen während der Laufzeit an den Entwickler ausgegeben werden. Um den Server jemanden außerhalb des Entwicklungsbereichs zu übergeben wird empfohlen den compiler auf den release-Modus zu stellen. Dazu wird der Befehl <code>swift build --configration release</code> ausgeführt. Je nach compiler Konfiguration wird das Produkt im Verzeichnis .build/debug/exe abgelegt oder .build/release/exe abgelegt.
Damit ist die Installation des Servers abgeschlossen und der Server kann gestartet werden. 

===Installation ohne Git===
Der Ablauf ohne Git ist geringfühgig anders als bei der Installation mit Git. Dazu wird der Server als .zip-Archiv von Github heruntergeladen und in das zuvor erstellt Verzeichnis "SwiftServer" entpackt. 

<blockquote>
<code>mkdir SwiftServer</code><br/>
<code>cd SwiftServer</code><br/>
<code>sudo tar -xcf /path/to/SwiftServer.zip ./</code><br/>
<code>swift build</code> oder <code>swift build --configuration release</code><br/>
</blockquote>

Danach ist die Installation auch ohne Git abgeschlossen und der Server kann gestartet werden.

==Server starten==
Der Server kann über ein Terminal gestartet werden nachdem dieser compiliert wurde siehe auch: [[Installation von Swift#Server installieren]] 
Danach kann der Server mit folgende Kommandos gestartet werden. Einzige Vorraussetzung ist, das man sich bereits mit dem Terminal im Projektordner befindet.<br/>
<code> ./.build/debug/exe <code> oder mit <code>./.build/release/exe</code><br/>
Danach sollte folgend Ausgabe auf dem Terminal angezeigt werden:

<blockquote>
[DBG] init HTTPServer()<br/>
[DBG] makeRoutes()<br/>
[INFO] set config<br/>
[INFO] Starting HTTP server on 0.0.0.0:3000<br/>
</blockquote>

Mit der letzen Zeile wird darüber informiert, dass der Server gestartet wurde und auf dem Port 3000 hört. Somit kann dieser mit einem bliebigen Browser angesteuert werden. Dazu wird in die Adressleiste <small>localhost:3000</small> eingegeben und es sollte die Login-Seite des Services angezeigt werden. 

Weiter mit einigen Details zum Server und den Packages die Verwendet werden. 

==Details zum Server==

Der Server entstand im zusammenhang mit einer Projektarbeit mit dem Thema Swift on Linux. 
Dazu wurde von uns rechachiert und zwei interessante Frameworks für die Entwicklung eines Servers ausgewählt. Diese beiden Frameworks sind <span class = "plainlinks">[http://www.kitura.io/ Kitura.io ]</span> und <span class = "plainlinks">[http://perfect.org/ Perfect.org ]</span>.
Grundsätzlich sind beide Frameworks sehr ähnlich, wobei hierbei einige Punkte einzubringen und beachten sind.
Kitura ist ein Framework das von IBM erstellt wurde und auf MAC sowie auf Linux lauffähig ist. Perfect wurde von PerfectlySoft Inc. einem kleinem Startup Unternehmen, das sich auf die Entwicklung mit Swift spezialisiert hat. IBM's Kitura hat einen Grundsätzliche Bibliothek die verwendet wird um einen HTTP Server umzusetzen und einige Packages um die Funktionalität zu erweitern. Perfect setzt auf das selbe Prinzip wie Kitura und hält wie auch Kitura ein Template als Startpunkt für den Server zur Verfügung. Einziges manko bei Kitura ist auf den ersten Blick, dass die Dokumentation nicht so ausführlich erscheint wie bei Perfect. 
Schlussendlich haben wir uns für swift Perfect entschieden. Grund dafür waren der eben erwähnte Punkt der Dokumentation, die von Perfect sehr ausführlich ist und auch einige Beispiele für verschiedenen Bereiche eines Servers bereithält. Die Beispiel und viele Bibliotheken und Packages werden von PerfectlySoft auf deren Github Account gehostet: <span class = "plainlinks">[https://github.com/PerfectlySoft PerfectlySoft on Github ]</span>

===Installation von Perfect===

Auch Perfect setzt einige Packet auf Linux voraus, darunter openssl, libssl-dev und uuid-dev. Diese können sehr leicht mit <code> sudo apt-get install openssl libssl-dev uuid-dev</code> installiert werden. 

===Perfect Template ===
Das Perfect Template wurde von uns als Ausgangspunkt der Entwicklung des HTTP Servers im MVC-Pattern gewählt. Als Reverence wurde von uns der selbe Server zuvor mit <span class = "plainlinks">[https://nodejs.org/en/  Node.js ]</span> und dem Framework <span class = "plainlinks">[http://expressjs.com/de/  Express.js ]</span> implementiert.
Das Perfect Template hält die Standard Baumstruktur des swift init-Prozesses bereit, die bereits in der [[Installation von Swift#Swift Package Manager]] vorgestellt wurde. Weiter befinden sich ein Datei names "main.swift" enthält, die die Initalisierung eines Serves bereithält. Interressant ist jedoch das in der Package.swift enhaltene Abhängigkeit <span class = "plainlinks">[https://github.com/PerfectlySoft/Perfect-HTTPServer.git ]</span>. Der Perfect-HTTPServer hat einige sehr nützliche Abhängigkeiten die auch wir im Server verwendet haben.

===Die wichtigsten Packages===
Wie oben beschrieben sind einige Packete grunsätlich notwendig um den Server ins laufen zu bekommen. Diese Grund-Pakete sind PerfectLib COpenSSL, HTTP, HTTPServer, PerfectLib, LinuxBridge und Net.
* COpenSSL bietet verschieden Verschlüsselungstechniken und SSL/TLS Methoden zur Verfügung die auf Linux in C installiert werden (Dieses Paket wurde nicht verwendet) https://github.com/PerfectlySoft/Perfect-COpenSSL
* HTTP bietet verschiedene Strukturen und Methoden um mit http Clients zu kommunizieren. Diese Paket muss mit "import PerfectHTTP" im Projekt eingebunden werden https://github.com/PerfectlySoft/Perfect-HTTP
* HTTPServer bietet die Hauptstrukturen für HTTP 1.1 und HTTP 2 server und ist die Hauptabhängigkeit für das Projekt und muss mit "import PerfectHTTPServer" eingebunden werden https://github.com/PerfectlySoft/Perfect-HTTPServer
* PerfectLib ist das Herz des Perfect Frameworks und ist ohne nicht lauffähig. Muss ebenfalls mit "import PerfectLib" eingebunden werden. https://github.com/PerfectlySoft/Perfect
* LinuxBridge bildet die Brücke zwischen Perfect und den Linux Distriputionen https://github.com/PerfectlySoft/Perfect-LinuxBridge
* Net ist ein networking Paket welches TCP, SSL, UNIX Socket files und IO Event Handling zur Verfügung stellt. https://github.com/PerfectlySoft/Perfect-Net

===zusätzliche Packages===

* Perfect-Logger und Perfect-RequestLogger sind Pakete die zum Loggen von Informationen auf die Konsole oder in ein Log File. der RequestLogger ist eine Kindklasse vom Logger und fängt durch das einbinden von Filtern alle Request und logged diese mit. https://github.com/PerfectlySoft/Perfect-RequestLogger
* Perfect-Session wurde verwendet um einen Session zu starten, verwalten und wieder zu vernichten. https://github.com/PerfectlySoft/Perfect-Session
* Perfect-Websockets bietet eine Funktionen zum Aufbauen von WebSocket-Verbindungen
* SwiftyBeaver bietet verschiede Verschlüsselungstechniken für Passwörter oder anderen empfindlichen Daten https://medium.com/swiftybeaver-blog/logging-in-server-side-swift-85bdecb6be80

===Wichtige Punkte der Implementierung===

===Linux===
Das Projekt soll nur auf Linux laufen deshalb wurde am Anfang folgender Code eingebunden:
<blockquote>
	<syntaxhighlight lang="cpp">
	#if !os(Linux)<br/>
	import Glibc<br/>
	print("We are sorry this is only meant to be run on Linux")<br/>
	exit(1)<br/>
	#endif<br/>
	</syntaxhighlight>
</blockquote>

====Session Verwaltung====
Bei der Session sind verschieden Konfigurationen möglich zu beachten ist jedoch das die cookieDomain die festgelegt werden kann während der Entwicklung nicht festgelgt werden darf sollange der Server nicht gehostet wurde.

<blockquote>
	<syntaxhighlight lang="cpp">
	SessionConfig.name = "mobileExtendSession" //Session name which is set as cookie<br/>
	SessionConfig.idle = 86400  // idle time set to one day<br/>
	// Optional<br/>
	//SessionConfig.cookieDomain = "localhost"<br/>
	SessionConfig.IPAddressLock = true //Session is bind to the IP address of the first request<br/>
	SessionConfig.userAgentLock = true //Session is bind to the user<br/>
	</syntaxhighlight>
</blockquote>

===JSON===
Objekte die als JSON serialisiert werden sollen müssen von der Klasse JSONConvertibleObject erben und die Methoden "setJSONValues" und "getJSONValues" müssen überschrieben werden.

<blockquote>
	<syntaxhighlight lang="cpp">
	public class Profile: JSONConvertibleObject {<br/>
	static let registerName = "profile"<br/>
		var username = ""<br/>
		var password = ""<br/>
	....<br/>
	....<br/>
	  override public func setJSONValues(_ values: [String: Any]) {<br/>
			self.username = getJSONValue(named: "username", from: values, defaultValue: "")<br/>
			self.password = getJSONValue(named: "password", from: values, defaultValue: "")<br/>
			self.firstname = getJSONValue(named: "firstname", from: values, defaultValue: "")<br/>
	....<br/>
	....<br/>
	override public func getJSONValues() -> [String: Any] {<br/>
			return [<br/>
					JSONDecoding.objectIdentifierKey: Profile.registerName,<br/>
					"username": username,<br/>
					"password": password,<br/>
			...<br/>
			]<br/>
	....<br/>
	....<br/>
	</syntaxhighlight>
</blockquote>

Wichtig ist auch das die Objekt beim Start des Servers als JSONDecodable registriert werden müssen:

<blockquote>
	<syntaxhighlight lang="cpp">
	JSONDecoding.registerJSONDecodable(name: Profile.registerName, creator: {return Profile()})<br/>
	</syntaxhighlight>
</blockquote>

===working Directory===
Beim setzen des Working Directory ist zu beachten, dass solange der Server nicht neu gestartet wird, nicht mehr im Verzeichnisbaum nach oben gändert werden kann, nur nach unten. Deshalb sollte das Working Direktory vom Standardwert Sources, nur maximal in ein Unterverzeichnis, wie bei unserem Server, dem Verzeichnis "exe", geändert werden. Beim Setzen des Working Directory wird der Ausführungsprozess in ein darunterliegendes Verzeichnis verschoben.

<blockquote>
	<syntaxhighlight lang="cpp">
	func setupDir(_: Void) -> Void {<br/>
		let workingDir = Dir("./Sources/exe")<br/>
		if workingDir.exists {<br/>
			do {<br/>
				try workingDir.setAsWorkingDir()<br/>
				LogFile.debug("Working directory set to \(workingDir.name)")<br/>
			} catch {<br/>
				LogFile.debug("error in getFile() setting WorkingDir: \(error)")<br/>
			}<br/>
		} else {<br/>
			LogFile.error("Directory \(workingDir.path) does not exist. Main executable not started from root of MVC cannot find resources?")<br/>
			exit(2)<br/>
		}<br/>
		issetup = true<br/>
	}<br/>
	var issetup = false<br/>
	</syntaxhighlight>
</blockquote>

==Conclusion==

Leider mussten wir im lauf des Projektes feststellen, dass die Dokumentation von Swift nicht mehr auf dem aktuellsten Stand ist, Fehler enthält oder teilweise keine hilfreichen Information über die Verwendung verschiedener Packete bereithält.






































